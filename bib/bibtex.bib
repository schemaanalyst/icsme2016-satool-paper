# SchemaAnalyst on GitHub
@misc{tool,
 author = {Phil McMinn and C. J. Wright and G. M. Kapfhammer},
 title = {{\textit{SchemaAnalyst}} software tool},
 url = {https://github.com/schemaanalyst-team/schemaanalyst},
 note = {2016},
 urldate = {05.23.2016},
 originalyear = {05.23.2016}
}

# PostgreSQL site
@misc{postgres,
 title = {{PostgreSQL} Featured Users},
 url = {https://www.postgresql.org/about/users/},
 note = {2016},
 urldate = {05.23.2016},
 originalyear = {05.23.2016}
}

# SQLite site
@misc{sqlite,
 title = {Well-Known Users of {SQLite}},
 url = {https://www.sqlite.org/famous.html},
 note = {2016},
 urldate = {05.23.2016},
 originalyear = {05.23.2016}
}

# StackExchange query link
@misc{stackexchange,
 title = {{ StackExchange } Query: Prevalence of {SQL} Databases},
 url = {http://goo.gl/F3Tiax},
 note = {2016},
 urldate = {05.23.2016},
 originalyear = {05.23.2016}
}

# DB-Engines site
@misc{dbrank,
 title = {{DB-Engines DBMS} Ranking},
 url = {http://db-engines.com/en/ranking},
 note = {2016},
 urldate = {05.23.2016},
 originalyear = {05.23.2016}
}

# GMKs PhD
@phdthesis{kapfhammer2007comprehensive,
  title={A comprehensive framework for testing database-centric software applications},
  author={Kapfhammer, Gregory M},
  year={2007},
  school={University of Pittsburgh}
}

# Cody's Comp
@mastersthesis{kinneer2016comp,
  document_type     = {Bachelor's Thesis},
  timestamp         = {20160520},
  author            = {Cody Kinneer},
  title             = {Query-aware Schema Testing},
  school            = {Allegheny College},
  year              = {2016},
  type              = {Bachelor Thesis},
  month             = {May},
}

# AVM
@article{Korel:AVM,
 author = {Korel, B.},
 title = {Automated Software Test Data Generation},
 journal = {IEEE Trans. Softw. Eng.},
 issue_date = {August 1990},
 volume = {16},
 number = {8},
 OPTmonth = aug,
 year = {1990},
 issn = {0098-5589},
 OPTpages = {870--879},
 numpages = {10},
 OPTurl = {http://dx.doi.org/10.1109/32.57624},
 doi = {10.1109/32.57624},
 acmid = {101755},
 OPTpublisher = {IEEE Press},
 OPTaddress = {Piscataway, NJ, USA},
 keywords = {array indexes, automated software test data generation, automatic programming, backtracking, data structures, dynamic data structures, dynamic data-flow analysis, function-minimization methods, function-minimization search algorithms, input variables, minimisation, pointers, program behavior, program execution flow, program testing, search problems.},
}

# papers for the review of results
@inproceedings{mcminn2016virtual,
title={Virtual mutation analysis of relational database schemas},
author={McMinn, Phil and Kapfhammer, Gregory M and Wright, Chris J},
booktitle={Proc. of 11th AST},
OPTpages={36--42},
year={2016},
OPTorganization={ACM}
}

@INPROCEEDINGS{kapfhammer2013search,
author={G. M. Kapfhammer and P. McMinn and C. J. Wright},
booktitle={Proc of 6th ICST},
title={Search-Based Testing of Relational Schema Integrity Constraints Across Multiple Database Management Systems},
year={2013},
OPTpages={31-40},
keywords={data integrity;relational databases;search problems;DBMonster tool;bug-fixing costs;constraint coverage;database management systems;knock-on effects;mutation analysis;mutation score;relational database;relational schema integrity constraints;search-based technique;search-based testing;table data generation tool;Compounds;Computer science;Database systems;Educational institutions;Relational databases;Testing;relational databases;search-based testing},
doi={10.1109/ICST.2013.47},
ISSN={2159-4848},
OPTmonth={March},
}

@inproceedings{kinneer2015automatically,
  title={Automatically evaluating the efficiency of search-based test data generation for relational database schemas},
  author={Kinneer, Cody and Kapfhammer, Gregory M and Wright, Chris J and McMinn, Phil},
  booktitle={Proc. of 27th SEKE},
  year={2015}
}

@inproceedings{wright2014impact,
  title={The impact of equivalent, redundant and quasi mutants on database schema mutation analysis},
  author={Wright, Chris J and Kapfhammer, Gregory M and McMinn, Phil},
  booktitle={Proc. of 14th QSIC},
  OPTpages={57--66},
  year={2014},
  OPTorganization={IEEE}
}

@phdthesis{wright2015mutation,
  title={Mutation Analysis of Relational Database Schemas},
  author={Wright, Christopher},
  year={2015},
  school={University of Sheffield}
}

@inproceedings{wright2013efficient,
  title={Efficient mutation analysis of relational database structure using mutant schemata and parallelisation},
  author={Wright, Chris J and Kapfhammer, Gregory M and McMinn, Phil},
  booktitle={Proc. of 8th Mutation},
  OPTpages={63--72},
  year={2013},
  OPTorganization={IEEE}
}

@article{mcminn2015effectiveness,
  title={The effectiveness of test coverage criteria for relational database schema integrity constraints},
  author={Mcminn, Phil and Wright, Chris J and Kapfhammer, Gregory M},
  journal={TOSEM},
  volume={25},
  number={1},
  OPTpages={8},
  year={2015},
  publisher={ACM}
}

# related work
@inproceedings{Fraser2011evosuite,
 author = {Fraser, Gordon and Arcuri, Andrea},
 title = {{EvoSuite}: Automatic Test Suite Generation for Object-oriented Software},
 booktitle = {Proc. of 19th ESEC/FSE},
 OPTseries = {ESEC/FSE '11},
 year = {2011},
 OPTisbn = {978-1-4503-0443-6},
 location = {Szeged, Hungary},
 OPTpages = {416--419},
 numpages = {4},
 OPTurl = {http://doi.acm.org/10.1145/2025113.2025179},
 doi = {10.1145/2025113.2025179},
 acmid = {2025179},
 OPTpublisher = {ACM},
 OPTaddress = {New York, NY, USA},
 keywords = {assertion generation, search based soft- ware testing, test case generation},
}

@inproceedings{Just2011a,
    author    = {Just, Ren{\'e} and Kapfhammer, Gregory M. and Schweiggert, Franz},
    title     = {Using conditional mutation to increase the efficiency of mutation analysis},
    booktitle = {Proc. of 6th AST},
    year      = {2011}
}

# cannonical sources
@Book{        ammann2008,
  author    = {Paul Ammann and Jeff Offutt},
  title     = {Introduction to software testing},
  publisher = {Cambridge University Press},
  year      = {2008}
}

@book{databasebook,
 author = {Silberschatz, Abraham and Korth, Henry and Sudarshan, S.},
 title = {Database Systems Concepts},
 year = {2006},
 isbn = {0072958863, 9780072958867},
 edition = {5},
 publisher = {McGraw-Hill, Inc.},
 OPTaddress = {New York, NY, USA},
}

# phil's survey paper
@article {STVR:STVR294,
author = {McMinn, Phil},
title = {Search-based software test data generation: a survey},
journal = {JSTVR},
volume = {14},
number = {2},
OPTpublisher = {John Wiley & Sons, Ltd.},
OPTissn = {1099-1689},
OPTurl = {http://dx.doi.org/10.1002/stvr.294},
doi = {10.1002/stvr.294},
OPTpages = {105--156},
keywords = {search-based software engineering, automated software test data generation, evolutionary testing, metaheuristic search, evolutionary algorithms, simulated annealing},
year = {2004},
}

@inproceedings{Kinneer2015a,
    author    = {Cody Kinneer and Gregory M. Kapfhammer and Chris J. Wright and Phil McMinn},
    title     = {expOse: {I}nferring worst-case time complexity by automatic empirical study},
    booktitle = {Proceedings of the 27th International Conference on Software Engineering and Knowledge Engineering},
    year      = {2015},
    abstract  = {A useful understanding of an algorithm's efficiency, the worst-case time complexity gives an upper
                 bound on how an increase in the size of the input, denoted n, increases the execution time of the
                 algorithm, or f(n).  This relationship is often expressed in the "big-Oh" notation, where f(n) is
                 O(g(n)) means that the time increases by no more than on order of g(n). Since the worst-case complexity
                 of an algorithm is evident when n is large, one approach for determining the big-Oh complexity of an
                 algorithm is to conduct a doubling experiment with increasingly bigger input sizes. By measuring the
                 time needed to run the algorithm on inputs of size n and 2n, the algorithm's order of growth can be
                 determined.  This paper introduces expOse, a tool to derive an "EXPerimental big-Oh" for supporting
                 "Scalability Evaluation" --- expOse infers an algorithm's big-Oh order of growth by conducting a
                 doubling experiment automatically.}
}

